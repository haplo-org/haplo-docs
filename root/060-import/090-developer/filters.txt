title: Filters
--

Filters implement generic conversion of values during the import process. Plugins can add to the [node:import/control/value-conversion/filters:standard filters] provided by the data import framework.

To implement a filter, you need to define a service, then declare it in a service metadata file.

The service should return a function that takes a value as a single argument, and returns a converted value, or @undefined@. This service will be called once and only once per *Batch*, so your implementation can keep state in a "closure":https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures.

h2. Example filter

This example filter doubles a string.

<pre>language=javascript
P.implementService("example:data:filter:double-string",
    function() {
        return function(value) {
            if(typeof(value) === "string") {
                return value + value;
            }
        };
    }
);
</pre>

To enable this filter to be found by the data import framework, create a @file/__service-metadata__.json@ in your plugin which declares the details of this filter:

<pre>language=json
{
    "example:data:filter:double-string": {
        "statements": [
            "conforms-to haplo:data-import-framework:filter"
        ],
        "metadata": {
            "name": "example:double-string",
            "description": "Doubles a string."
        }
    }
}
</pre>
