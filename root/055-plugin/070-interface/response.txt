title: Response
long_title: Response interface
link_as: keyword
--

A JavaScript object implementing the @Response@ interface represents an HTTP response.


h2. Construction

Constructed by the Platform when a plugin handles a request, available through the @response@ property of the [node:plugin/interface/exchange] object.


h2. Interface

h3(property). headers

JavaScript @Object@ for the response headers, acting as a dictionary.


h3(property). statusCode

The HTTP status code for the result. Use the constants defined in the [node:plugin/misc/http] constants.


h3(property). body

The body of the response. Set to a @String@.

Alternatively, set this property to [node:plugin/interface/binary-data] (eg [node:plugin/o/generate:generated files]) or [node:plugin/interface/file] objects. In these cases, appropriate headers will be added for the @Content-Type@ and the download filename.


h3(property). kind

As an alternative to setting the @Content-Type@, set this property to the kind of response. Possible values are @html@, @javascript@, @css@, @json@, @text@, @xml@, @xls@, @csv@, @tsv@ and @yaml@.

All @Content-Type@ headers will include the UTF-8 charset option.

Any @Content-Type@ header set using the @headers@ property will override the header implied by the @kind@ property.


h3(function). redirect(url)

Sets this response to a HTTP redirect.


h3(function). setBackLink(url, text)

The standard HTML 'chrome' for a page includes an option link in the top left, which is used as a link back to the previous page. Use this to set the url path and, optionally, the text if you don't want it to read "Back".

This may more easily be set with the @backLink@ and @backLinkText@ keys in the view for the [node:plugin/interface/exchange]'s @render()@ function.


h3(function). useStaticResource(resourceName)

When using the standard HTML 'chrome', include a static JavaScript or CSS resource from the plugin's @static@ directory. This will output a @<script>@ or @<link>@ tag based on the extension of the file.

The resource name is the filename, without any path, for example, @"example.js"@.

If you need to include a static resource in a response which is not being generated by your plugin, use the [node:plugin/templates/functions/ui#std_plugin_resources] template function, and render the template, discarding the HTML it returns.


h3(function). setExpiry(seconds)

Set the expiry time of the response, specified as seconds into the future. This will set the @Cache-Control@ and @Expires@ headers of the response.
