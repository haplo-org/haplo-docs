title: Function lists
--

These function lists configure the overall properties of the Workflow. You may only need to implement @start()@.

Functions added to a list are called in reverse order of being defined, breaking as soon as any returns a value.


h2. start(fn)

Called when a new workflow is started. Use this to configure the starting state of the workflow, which otherwise defaults to @"START"@.

<pre>language=javascript
EgWorkflow.start(function(M, initial, properties) {
    initial.state = "starting_state";
});
</pre>

@properties@ is the argument to the @create()@ function which creates the instance.


h2. implementWorkflowService(name, fn)

Defines a service @fn@ that can be called by @name@ on any instance of this workflow. @fn@ takes the instance as the first argument.

By convention @name@ should begin with the workflow name as specified in [node:standard/workflow/definition/implement:@P.workflow.implement()@].

If there is more than one implementation for a service @name@, they will be called in reverse order of registration until one returns something other than @undefined@ (as for all worklflow function lists).

*Note:* This differs from [node:plugin/o/service:platform services], which are called in order of registration.

<pre>language=javascript
EgWorkflow.implementWorkflowService("eg:can_view_workflow", function(M, user) {
    return CanViewApplication(M, user);
});
</pre>


h2. getActionableBy(fn)

Translate an @actionableBy@ name into a [node:plugin/interface/security-principal] object. If your function cannot find this user, then make sure you return @undefined@ so other functions can try too.

<pre>language=javascript
EgWorkflow.getActionableBy(function(M, actionableBy, target) {
    if(actionableBy === "user") {
        return O.user(M.workUnit.data.userEmail);
    }
});
</pre>

There's a fallback implementation which provides some very basic actionable by names:

 * @"object:creator"@, the user which created the object associated with the process

 * the API code of any group.

If you implement @getActionableBy()@, add a @hasRole()@ function which looks up your name.

The [node:standard/workflow/definition/std-features/entities#Entity_roles:entities system] provides an implementation which usually does everything you need.


h2. hasRole(fn)

Given a [node:plugin/interface/security-principal] object, test to see if the user has the given role in the instance.

There's a fallback implementation which tests whether the user is a member of a group, specified by API code, or @"object:creator"@, matching the fallback implementation for @getActionableBy@.

<pre>language=javascript
EgWorkflow.hasRole(function(M, user, role) {
    if(role === "user") {
        return (user.email === M.workUnit.data.userEmail);
    }
});
</pre>



h2. textInterpolate(fn)

Given a text string, modify it. This is used to replace tokens by specific names, for example, names of the actual users involved.

The entities system implements a useful text interpolation based on the defined entities.

<pre>language=javascript
EgWorkflow.textInterpolate(function(M, text) {
    return text.replace(/\#email\#/g, M.workUnit.data.userEmail);
});
</pre>

This function is slightly unusual in that it must always return a value, and that value is passed through all functions so all interpolations are performed, not just the first matching interpolation.



h2. renderTimelineEntryDeferred(fn)

Render a custom timeline entry.

<pre>language=javascript
EgWorkflow.renderTimelineEntryDeferred(function(M, entry) {
});
</pre>

@entry@ is the timeline entry. Test @entry.action@ to see if it's something you should render, and if so, return a deferred render using [node:plugin/interface/template#deferredRender] on a template using the properties in @M@ and @entry.data@.



h2. taskUrl(fn)

Generate the canonical URL of the page representing this instance.

You should not generally need to implement this, as if your workflow is associated with an Object, that page will automatically be used.

<pre>language=javascript
EgWorkflow.taskUrl(function(M) {
  return "/do/example/process/"+M.workUnit.id;
});
</pre>



h2. taskTitle(fn)

Generate the human readable name of this instance, used in links and throughout the UI.

You should not generally need to implement this, as if your workflow is associated with an Object, the title of the object will be used.

<pre>language=javascript
EgWorkflow.taskTitle(function(M) {
  return "Process "+M.workUnit.id;
});
</pre>


h2. modifyFlags(fn)

Features may use this function list to modify the flags. It's recommended that you avoid the use of this function list if possible.

You can force a recalculation of the cached flags with [node:standard/workflow/interfaces/instance#recalculateFlags].

<pre>language=javascript
EgWorkflow.modifyFlags(function(M, flags) {
  flags.xyz = true;
});
</pre>


