title: Collections
--

The standard Reporting plugin provides the ability to generate reports based on historical data from many different sources.

Collections define a set of data/statistics/filters related to a type of StoreObject.

h2. Definition

Collections are defined by implementing the @"std:reporting:discover_collections"@ service and passing a function with an argument that will be the collection @discover()@ function when called.

The discover function takes three arguments, a unique internal name for the collection, a human readable title/description, and an optional list of categories.

For example, to define a new collection:

<pre>language=javascript
P.implementService("std:reporting:discover_collections", function(discover) {
    discover("example", "Example Collection");
});
</pre>

h2. Setup

Collections are setup by implementing the @"std:reporting:collection:COLLECTION_NAME:setup"@ service which passes in the collection object which can then be used to add facts, statistics, filters and properties.

This service can be implemented in any plugin, which allows plugins to add their facts about their own functionality/data to a collection. 

<pre>language=javascript
P.implementService("std:reporting:collection:example:setup", function(collection) {
    collection.fact(...);
});
</pre>

In addition, the wildcard @"std:reporting:collection:*:setup"@ service is called to allow plugins to configure every collection.

Functions called on the collection object return themselves, and so can be chained.

h2. Direct access

Collections can also be accessed directly by calling the function @P.reporting.collection(name)@ where @name@ is the string name of the collection. This returns the collection object, for use outside of a [node:standard/reporting/dashboards:dashboard].

This should only be used for querying the underlying data. Any setup or modifications should be carried out inside the setup functions.

<pre>language=javascript
var collection = P.reporting.collection("books");
var allCurrentRows = collection.selectAllCurrentRows();
</pre>

h2. Interface

h3(property). name

Name of the collection.

h3(property). description

Readable description of the collection.

h3(property). isCollection

Always @true@.

h3(property). isUpdatingFacts

@true@ if the Collection is known to be out of date and is updating facts in the background.

h3(function). fact(name, type, description)

Define a fact. @name@ must be unique within the collection. @description@ is the human readable name of the fact shown in the admin UI and in Dashboards when no heading is defined.

@type@ may be any valid [node:plugin/interface/database#type:database type].

Note there is an implicit @"ref"@ fact, which is the ref of the object being reported on.

In addition to the standard database types, the following types are also allowed as convenience methods

|*Name*|*Data type*|*JavaScript type*|
|@end-date@|Date|Date|

@end-date@ is a convenience type useful for specifying facts that use the [node:plugin/interface/date-time#end:end] property of a platform Datetime region.

h3(function). indexedFact(name, type, description)

As @fact()@, but a database index is created for the fact to improve the speed of filtering. Use only if you know it's required.

h3(function). property(name)

Retrieve the user defined property for the given @name@, returning @undefined@ if the property has not been set.

h3(function). property(name, value)

Set the user defined property for @name@ to @value@. If the property is already defined, an exception will be thrown.

h3(function). statistic(specification)

Defines a statistic using @specification@. The @specification@ must define an aggregate function to use or a calculate function that can be called to generate the statistic value.

@specification@ is an object with the following properties:

|*Property*|*Description*|
|name|Unique statistic name|
|description|Human readable name for displaying in the UI|
|filter|The filter to apply to the collection|
|aggregate|The [node:plugin/interface/database-query#aggregate:aggregate function] to use to generate the statistic value|
|calculate|A function with two arguments, a [node:plugin/interface/database-query] object and a @context@, which is either a collection or a dashboard and implements @property()@.|

h3(function). filter(name, filterFunction)

Defines a named filter on the collection. @filterFunction@ is passed the [node:plugin/interface/database-table#select:select] object which is used to filter the collection.

@name@ is either a string, or one of the specially defined named filters which are available via the collection object.

|*Filter*|*Description*|
|collection.*FILTER_ALL*|Filter applied to *every* usage of the collection|
|collection.*FILTER_DEFAULT*|Filter applied to the collection if no filters are specified|

h3(function). currentObjectsOfType(type, type2, ...)

Tells the collection what object Types the collection should be storing facts for, every object of type @type@ will be included in the collection.

This is a shortcut for implementing functions for @currentObjects()@ and @objectIsValidForCollection()@.

@type@ arguments should be defined in the [node:plugin/schema/requirements-schema:schema requirements]

Multiple types can be specified by passing additional arguments.

This should only be called in the owning plugin.

h3(function). currentObjects(fn)

It is probably easier to use @currentObjectsOfType()@ than this function, but if you do use it, remember to implement @objectIsValidForCollection()@ too.

@fn@ is a function which returns an @Array@ or [node:plugin/interface/store-query-results] containing all [node:plugin/interface/store-object] which are currently members of the collection.

@fn@ is called when the collection is rebuilt to determine the current collection membership.

h3(function). objectIsValidForCollection(fn)

@fn@ is called with a [node:plugin/interface/store-object] as a single argument, and must return @true@ if this object is currently a member of the collection.

h3(function). collectAllFactsInBackground()

Initiate a full rebuild of the collection.

h3(function). selectAllCurrentRows(filterName)

Returns all current rows from the collection.

The optional argument @filterName@ is the name of one of the filters defined on the collection, and is used to restrict the rows returned from the query.

h3(function). selectAllRowsAtTime(date, filterName)

Returns rows from the collection for the data that was current at @date@.

The optional argument @filterName@ is the name of one of the filters defined on the collection, and is used to restrict the rows returned from the query.

h2. Example

The following example shows a minimal collection implementation.

<pre>language=javascript
P.implementService("std:reporting:collection:books:setup", function(collection) {
    collection.
        currentObjectsOfType(T.Book).
        fact("title", "text", "Book title").
        fact("isCheckedOut", "boolean", "Book is checked out").
        fact("timesLoaned", "int", "Number of times book has been loaned").
        statistic({
            name: "checkedOut", description: "Number of books checked out",
            filter: function(select) { select.where("isCheckedOut","=",true); },
            aggregate: "COUNT"
        }).
        filter("neverLoaned", function(select) { select.where("timesLoaned","=",0); }).
});
</pre>
