title: Widgets
--

h2. Object Widget

Used to set up an object for display on the publication.

h3(function). withoutAttributes(attrs)

Used to supply an object widget with attributes that should not be displayed. Will display all attributes on an object except those listed in @attrs@  

Arguments:

|@attrs@|Array of attribute API codes or local schema references to the attributes that should be hidden from the object|

Example usage:

<pre>language=javascript
E.render({
    object: P.webPublication.widget.object(output).withoutAttributes([A.Editor, A.Keywords]),
    outputs: outputs
}, 'output');
</pre>

h3(function). onlyAttributes(attrs)

Inverse of @withoutAttributes@, will only display the attributes listed in @attrs@ and will hide everything else.Arguments:

|@attrs@|Array of attribute API codes or local schema references to the attributes that should be shown from the object|

Example usage:

<pre>language=javascript
E.render({
    object: P.webPublication.widget.object(publisher).onlyAttributes([A.Title, A.Address])
}, 'publisher');
</pre>

h2. Templating

The object widget has a few getter functions defined for use in [node:plugin/templates/hsvt-language] templates.

h3. attributes

Returns the list of all attributes to be displayed for a given object in an array to be iterated over.

Example usage:

<pre>language=xml
each(attributes) {
    <p>attributeName ": " yield:value()</p>
}
</pre>

h3. first

Renders the first attribute value for the attribute provided in the template.

Example usage:

<pre>language=xml
    render(object.first.Type)
</pre>

h3. every

Renders every attribute value for the attribute provided

<pre>language=xml
    render(object.every.Keyword)
</pre>


h3. asTable

Renders the object in a table form with the attribute name and qualifier in a row with corresponding values, useful for displaying objects with the possibility of many nested values, such as outputs.


<pre>language=xml
    render(object.asTable)
</pre>

h2. Search Widget

Used to display results of a search query

h3. Creation

The search widget is defined with @E@ as the [node:plugin/interface/exchange] object and a @spec@. The @spec@ can have the following properties

|@formOnly@|Denotes if the search widget is just for the form and the search will be handled elsewhere|
|@alwaysSearch@|Always runs a query even if the search bar is empty|
|@hideRelevanceSort@|Used to hide the relevance sort order for a search|
|@pageSize@|The amount of results to display on a single page|
|@modifyQuery@|A @function(query)@ to modify the query prior to it's execution|

Example usage:

<pre>language=javascript
P.webPublication.widget.search(E, {
    alwaysSearch: true,
    hideRelevanceSort: true,
    hideResultsCount: true,
    pageSize: 40,
    modifyQuery(query) {
        query.
            // Restrict search to repository items
            anyLabel([Label.RepositoryItem]);
    }
});
</pre>

h2. Templating

h3. form

Renders the default search bar template

h3. results

Renders the page around the search results, displaying the number of results, filters and next/prev arrows. The actual results are rendered based on the [node:standard/web-publisher/interface:@searchResultRendererForTypes@]