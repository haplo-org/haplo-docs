title: Ubuntu Server 14.04
long_title: Build on Ubuntu Server 14.04
--

We would strongly recommend not using an older version such as 14.04, current versions such as 16.04 LTS are much better supported and require fewer workarounds to get everything working smoothly. The following modified instructions, valid for the older 14.04 LTS release, are largely for reference.

*Important:* Do not include a dot in the hostname. A good hostname to choose would be @haplo@

You'll probably want to install openssh to allow you to log in from the VM host.

<pre>
sudo apt-get install openssh-server
</pre>


h2. Install required packages

After logging in, install packages with:

<pre>
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install g++ make openjdk-8-jdk maven avahi-daemon uuid-dev curl patch git
</pre>

Check the version of java with @java -version@. If it's not using Java 8, run @sudo update-alternatives --config java@ to set the correct version.

[SNIPPET platform/build/maven-secure]

Install PostgreSQL 9.3 with:

<pre>
sudo apt-get install postgresql-9.3 postgresql-server-dev-9.3 postgresql-contrib-9.3
</pre>

[SNIPPET platform/build/postgresql-local-user]

Disable the PostgreSQL daemon and allow the current user to run the server with:

<pre>
sudo /etc/init.d/postgresql stop
sudo update-rc.d postgresql disable
</pre>


h2. Setting up PostgreSQL

Create a database as the current user:

<pre>
mkdir -p ~/haplo-dev-support/pg
/usr/lib/postgresql/9.3/bin/initdb -E UTF8 -D ~/haplo-dev-support/pg
</pre>


h2. Running PostgreSQL for development and testing

Whenever you want to run the database, firstly, recreate the @/var/run/postgresql@ directory, as @/var/run@ gets wiped on every boot.

<pre>
sudo mkdir /var/run/postgresql
sudo chmod a+rwx /var/run/postgresql
</pre>

Then, leave the following command running in a terminal window:

<pre>
/usr/lib/postgresql/9.3/bin/postmaster -D ~/haplo-dev-support/pg
</pre>

Open another terminal window now, before moving on to building Haplo.


[SNIPPET platform/build/building-haplo]


[SNIPPET platform/build/run-test-suite]

If tests fail, you haven't allocated enough memory to the VM.


[SNIPPET platform/build/running-server]

<pre>
cd ~/haplo
db/init_app.sh haplo test.`hostname`.local "Test application" sme 4000
db/create_app_user.sh test.`hostname`.local "Ben Summers" ben@example.com password
echo Visit http://test.`hostname`.local:8080 in your browser.
</pre>

The Haplo server will use multicast DNS to broadcast the hostname for the application, so a web browser on the machine on which the VM is running should be able to connect to the server on the address printed by the @echo@ command.

You need to make sure your host OS can resolve multicast DNS:

*Mac OS X*: Supports multicast DNS out of the box.

*Linux*: Ensure the @avahi-daemon@ package is installed on the host OS.

*Windows*: There isn't a good multicast DNS implementation for Windows. Find the IP address of the VM by running @ipconfig -a@ in the VM, then add the application hostnames to the @C:\Windows\System32\Drivers\etc\hosts@ file on the Windows host.


[SNIPPET platform/build/server-login]


[SNIPPET platform/build/next-steps]
