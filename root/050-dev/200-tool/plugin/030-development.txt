title: Plugin development
--

First, you must [node:dev/tool/plugin/getting-ready:start your session].


h2. Authorise with server

The plugin tool needs to be authorised to use your server. Start the process by running the plugin tool @auth@ command, specifying the hostname of your application.

<pre>
    haplo-plugin auth app.example.com
</pre>

Next, you need to open your web browser and authenticate the request. The plugin tool will have printed out a URL to visit, and on some platforms, will have automatically opened the page in your web browser.

After you have authenticated, return to the terminal and wait until the plugin tool finishes the authorisation process.

This will set the default server, which will be used for future @haplo-plugin@ commands. You can authorise the plugin tool for multiple servers, then use the @server@ command to switch between them. To choose a server temporarily, use the @-s@ command line switch. You only need specify a unique substring of the server name.

The API keys used by the plugin tool are stored in a @.server.json@ file in the current directory. Do not commit this to source control.


h2. Creating a new plugin

To create a new plugin called @test_plugin@, make sure you're in your project folder, then type:

<pre>
    haplo-plugin -p test_plugin new
</pre>

This will create a @test_plugin@ folder, populated with the minimum files necessary to register the plugin and respond to an HTTP request.


h2. Developing your plugin

Typing

<pre>
    haplo-plugin
</pre>

will upload the plugin to the server, and install it. You can test the plugin by visiting the URL given in the output from the @new@ command, replacing the hostname with the hostname of the application you're using for development.

While it is running:

* if you make any changes to the files on the disc, the Plugin Tool will automatically upload them to the server
* if your plugin calls [node:dev/plugin/standard-interfaces/console:console.log()], the message will output by the Plugin Tool.

See [node:dev/tool/plugin/database:working with databases] for notes on how to use the [node:dev/plugin/database:relational database] during development.


h2. Errors

When developing a plugin, you may occasionally make a mistake.

Errors are reported in two ways. Firstly, within your web browser, and secondly, as output from the Plugin Tool.

The Plugin Tool also does syntax and code correctness checking with "JSHint":http://jshint.com/. Plugins won't be accepted unless they pass these tests which help you avoid common mistakes.

If your plugin doesn't work as you expect, for example a change isn't applied, check the output of the Plugin Tool in the terminal window. It will attempt to make a beep sound when it needs your attention, but this may not work on your platform.


h2. Tests

Where appropriate, you should write [node:dev/plugin/tests:automated tests] for your plugin's key functionality. To run them, use the @test@ command:

<pre>
    haplo-plugin test
</pre>

The @test@ command takes an optional argument to specify a subset of the tests. If given, only the test scripts whose filenames contain the given string will be run.


h2. Debugging

Currently debugging support is a little minimal, limited to reporting errors in the web browser and viewing the output of [node:dev/plugin/standard-interfaces/console:console.log()] while the Plugin Tool is running the @develop@ command.

You can also view the output of @console.log()@ in System management:

CLICK_PATH TOOLS > System management > Plugins > Diagnostics

A full debugger may be provided in the future.


h2. Uninstallation

To remove a plugin under development, type

<pre>
    haplo-plugin uninstall
</pre>

Run the plugin tool again to upload and re-install the plugin.


h2. Usage

For full command line usage information, type

<pre>
    haplo-plugin --help
</pre>

to display the built in documentation.
