title: Permissions
--

The Haplo users and groups system applies permissions based on [node:setup/permissions:labels]. A user will probably not be allowed to read or write all the objects in the store.

The plugin API enforces this. If you attempt to read or write an object without permission, an exception will be thrown, and queries will only search objects the user is permitted to read. This is not to protect the store against plugins reading too much -- a plugin has access to everything by design -- but to make it easier to write plugins without having to worry accidentally leaking something the user shouldn't see.


h2. Checking permissions

Use functions on [node:dev/plugin/interface/security-principal] objects, such as [node:dev/plugin/o/request/current-user]. Useful functions include @isMemberOf()@ and @canCreateObjectOfType()@.


h2. Disabling permission checks

Sometimes it's useful to perform a privileged operation within a request context. In this case, you can use [node:dev/plugin/o/permissions#O_withoutPermissionEnforcement] or [node:dev/plugin/o/permissions#O_impersonating] to temporarily disable permission enforcement.

You should use [node:dev/plugin/o/permissions#O_withoutPermissionEnforcement] when you need to perform an operation which is not normally permitted by the user's permissions, but still needs to be attributed to them in the audit trail and object history.

[node:dev/plugin/o/permissions#O_impersonating] is used to switch permissions to that of any user, or to be able to perform privileged operations as a special 'SYSTEM' user when actions should not be attributed to any user in particular.
