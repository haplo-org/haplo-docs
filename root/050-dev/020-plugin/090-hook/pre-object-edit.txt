title: hPreObjectEdit
class: HookNode
--

This hook allows a plugin to modify attributes and application behaviour when editing objects.

The [node:dev/plugin/interface/store-object] passed to the hook is read only. @mutableCopy()@ should be used to make a copy, which is then modified. To work well with other plugins, start with an existing replacement object if one already exists.

You cannot modify the type of the object being created. The replacement object will be ignored if the first type isn't exactly the same as the @object@ passed in to the hook. This avoids confusing the user.

This hook may be called several times for each object creation and edit, both on display of the form and when the editor is submitted. Use the @isTemplate@ and @isNew@ arguments to determine which actions should be taken.

In general, only make changes when @isTemplate@ is @true@. In this case, the application is about to display a template for a new object, which the user will complete and save. Be careful about using it in other circumstances. The user is unlikely to expect that the attributes will be changed when editing an existing object.

If you want to completely replace the user interface for creating a new type of object, for example, with some means to select fields, you can set @redirectPath@ in the response to redirect the user's browser. You should only redirect to paths which are [node:dev/plugin/request-handling:handled by your plugin].

h3. Example

This hook implementation pre-fills the date field in new File objects with the current date:

<pre>language=javascript
P.hook('hPreObjectEdit', function(response, object, isTemplate, isNew) {
    if(isTemplate && object.isKindOf(T.File)) {
        var r = response.replacementObject || object.mutableCopy();
        r.appendDate(new Date());
        response.replacementObject = r;
    }
});
</pre>
