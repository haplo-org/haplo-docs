title: Plugin template functions
--

Plugin template functions are defined with [node:dev/plugin/interface/plugin/response-generation#globalTemplateFunction], and then are available in templates in all plugins. This allows you to write a plugin to provide functions to other plugins, but it does mean that you need to be careful to name them so they don't clash.

If in doubt, prefix the function name with the name of your plugin, eg @example_plugin:one@.

When they are rendered, your JavaScript function is called with @this@ set to a [node:dev/plugin/interface/template-function-this] object, and passed arguments from the template.

Any return value from the function is output, appropriately escaped, in the template. Use the @this@ object when you need to output HTML or render blocks.


h2. Example

Define a template function:

<pre>language=javascript
P.globalTemplateFunction("example:hello", function(name) {
  if(this.hasBlock(null)) {
    this.writeBlock(null);
  } else {
    this.write("Hello ");
  }
  this.write(name);
});
</pre>

Then use it in your template:

<pre>language=hsvt
<div class="default">
  example:hello(userName)
</div>
<div class="block">
  example:hello("someone") { "Goodbye " }
</div>
</pre>

Which, with an appropriate view, might output:

<pre>
<div class="default">Hello John</div>
<div class="block">Goodbye someone</div>
</pre>

If you only need to output some text which should be escaped according to the current context, it's easier to just return a string:

<pre>language=javascript
P.globalTemplateFunction("example:hello", function(name) {
  return "Hello "+name;
});
</pre>
