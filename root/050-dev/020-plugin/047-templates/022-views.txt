title: View properties
long_title: Views and view properties
--

Templates render a *view*, which is a nested JavaScript data structure containing arrays, objects (acting as dictionaries), primitve types like strings and numbers, and any other JavaScript object.

HSVT uses the view structure to generate HTML, through control flow with template functions like @if()@ and @each()@, or inserting the values from the view with *view properties*.

Referring to a value in the view for either purpose is written as a bare word. Use the @.@ notation to access nested values. For example the template:

<pre>language=hsvt
<div> <span> xyz </span> abc.zyx </div>
</pre>

with a view of

<pre>language=json
{
    "xyz": "One",
    "abc": {
        "zyz": "Two"
    }
}
</pre>

is rendered as

<pre>
<div><span>One</span>Two</div>
</pre>


h2. View root

@.@ is a special literal name which refers to the root of the current template. It's most often used to render items in an array when you iterate over them with @each()@.

This template,

<pre>language=json
each(sentence) {
    <p> . </p>
}
</pre>

when given a view like this,

<pre>language=json
{
    "sentence": [
        "One", "Two", "Three"
    ]
}
</pre>

will render each sentence in it's own @<p>@ tag.


h2. Escaping

You do not need to worry about escaping values to prevent security flaws like XSS. HSVT parses your template, understands the HTML structure, and chooses the right escaping mode for the context.
