title: Forms
long_title: Plugin form support
--

[node:dev/plugin/form:Forms] are defined through your plugin.


h2. Interface

h3(function). form(formId, pathname)

Declare a form for use by this plugin, returning a [node:dev/plugin/interface/form-description] object.

The specification is stored in a JSON file bundled in your plugin's @[node:dev/plugin/directory-structure#file:file/form]@ directory, and is lazily loaded when it's required. The @formId@ argument must match the @formId@ property in the specification.

See [node:dev/plugin/form/usage:using forms] for an example.

@form()@ can only be called while the plugin is being loaded.

Consider using @replaceableForm()@ if you are writing a generic plugin which might need custom forms for an application.


h3(function). form(specification)

Declare a form for use by this plugin, returning a [node:dev/plugin/interface/form-description] object.

The specification is passed in as a JavaScript literal object. Using this version of the @form()@ method is *not recommended* as it uses memory unnecessarily, and clutters your JavaScript with form definitions.

@form()@ can only be called while the plugin is being loaded.



h3(function). replaceableForm(formId, pathname)

Similar to @form()@, but the [node:dev/plugin/interface/form-description] object returned is marked as replaceable.

See [node:dev/plugin/form/replaceable-forms] for how to implement a plugin which replaces a form in another plugin.


h3(function). dataSource(name, kind, definition)

Define a data source. See [node:dev/plugin/form/data-source] for the various ways data sources can be defined.

@dataSource()@ can only be called while the plugin is being loaded.

