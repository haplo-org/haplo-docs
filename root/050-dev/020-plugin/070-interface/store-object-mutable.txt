title: StoreObjectMutable
long_title: StoreObjectMutable interface
link_as: keyword
--

A JavaScript object implementing the @StoreObjectMutable@ interface is an object in the Object Store which can be modified, then saved back to the store.

@StoreObjectMutable@ objects also implement the [node:dev/plugin/interface/store-object] interface.


h2. Construction

Use [node:dev/plugin/o/constructor/object] or [node:dev/plugin/interface/store-object#mutableCopy] on [node:dev/plugin/interface/store-object] objects.



h2. Interface

h3(acts_as). StoreObject

All properties and functions in the [node:dev/plugin/interface/store-object] interface are implemented.


h3(function). save(labelChanges)

Creates or updates the object in the store.

@labelChanges@ is optional, and if present, is used to add or remove labels from the defaults, or those specified when calling @O.object()@.


h3(function). append(value, desc, qual)

Append a value to the object, with the specified @desc@ from the schema [node:dev/plugin/schema/schema-global/attr] constants. @qual@ can be omitted, or use @QUAL["std:qualifier:null"]@ to specify no qualifier.

The value can be:

|*Type*|*Notes*|
|[node:dev/plugin/interface/ref]|Link to another object|
|[node:dev/plugin/interface/store-object]|@ref@ property used for linking to the object|
|[node:dev/plugin/interface/text]|Any text object created with [node:dev/plugin/o/constructor/text]|
|@String@|Automatically converted into a [node:/dev/plugin/interface/text]|
|[node:dev/plugin/interface/date-time]|Variable precision date and time|
|@Date@|Automatically converted into a [node:dev/plugin/interface/date-time] with Day precision|


h3(function). appendType(value, qual)

Shortcut for @append(value, ATTR["dc:attribute:type"], qual)@


h3(function). appendTitle(value, qual)

Shortcut for @append(value, ATTR["dc:attribute:title"], qual)@


h3(function). appendParent(value, qual)

Shortcut for @append(value, ATTR["std:attribute:parent"], qual)@


h3(function). remove(desc, qual, iterator)

Remove zero or more values from the object. @desc@ is required, @qual@ can be omitted to specify any qualifier (If @QUAL["std:qualifier:null"]@ is used for @qual@, it will only remove values without a qualifier).

If an @iterator@ is passed as the last argument, it will be called with @(value, desc, qual)@ arguments. If it returns @true@, the value will be deleted.


h3(function). preallocateRef()

Preallocate the @ref@ for a new object before @save()@ is called.

@preallocateRef()@ will throw an exception if it is called when the @ref@ has already been allocated, either by calling this function or @save()@.

Returns the new @ref@.
