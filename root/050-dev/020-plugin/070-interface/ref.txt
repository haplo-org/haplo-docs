title: Ref
long_title: Ref interface
link_as: keyword
--

A JavaScript object implementing the @Ref@ interface is a reference to an object in the Object Store.

h2. Construction

Use [node:dev/plugin/o/constructor/ref].

To avoid hardcoding @Ref@ values in your plugin, use the [node:dev/plugin/o/behaviour:behaviour] lookup functions.

If you have an array of @Ref@ objects, the [node:dev/plugin/o/utility#O_deduplicateArrayOfRefs] function may be useful.


h2. Interface


h3(property). objId

The object ID of the object.


h3(function). toString()

Return the reference in 'presentation' format, used in URLs and XML.


h3(function). load()

Load the referred object, returning an object implementing the JavaScript interface [node:dev/plugin/interface/store-object].

Note that deleted objects can still be loaded. Use the @deleted@ property if checking that object hasn't been deleted is important. However, in many cases, you should just use it anyway.


h3(function). deleteObject()

Deletes the object referred to by this reference, without loading it first. Has the same effect as the @deleteObject@ function on a [node:dev/plugin/interface/store-object], but more efficient if the object has not already been loaded.


h3(property). behaviour

Returns the 'behaviour' of the object represented by this @Ref@. See [node:dev/plugin/o/behaviour] for how this property is determined and the intended use.

If the object does not have a behaviour, this property is @null@.

The current user's permissions are not enforced when reading the object store to determine the behaviour.


h3(function). getBehaviourExactMaybe()

Returns the exact _configured behaviour_ attribute of the object, without using the inheritance rules of the @behaviour@ property.

If there is no attribute, @null@ will be returned.

It is a function, rather than a property, because it will do a database lookup every time it's called. You need to be careful about performance when using it.

Also, in general, a good design should never need to test what the exact behaviour is, only the root behaviour. If you need this, then there's something exceptional going on, and your code should look ugly to warn everyone reading it in the future.

The current user's permissions are not enforced when reading the object store to determine the behaviour.
