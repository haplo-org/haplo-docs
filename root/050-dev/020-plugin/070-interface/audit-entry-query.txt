title: AuditEntryQuery
long_title: AuditEntryQuery interface
link_as: keyword
--

A JavaScript object implementing the @AuditEntryQuery@ interface represents a query for [node:dev/plugin/interface/audit-entry] objects and provides access as a read only @Array@ of @AuditEntry@ objects.

By default, only displayable audit events in sections the current user has permissions for
as returned.


h2. Construction

Use [node:dev/plugin/o/audit-trail#O_audit_query].


h2. Usage

Select the relevant audit entry criteria using the @build query@ methods outlined below, then access the results.  By default, the query is limited to @1000@ results.  This limit may be overridden, but care must be taken not to cause undue server load when querying the audit trail.

Execution is implicit when you use the @Array@-like interface, such as the @length@ property or access an element with the @[]@ operator.

The default sort order for results is by [node:dev/plugin/interface/audit-entry#creationDate] (most recent first).  If an explicit @sortBy@ column is selected, this ordering will be applied as a fallback (secondary) sort.


h3. Performance notes

If you just need the most recent audit entry, based on the @creationDate@ property of the [node:dev/plugin/interface/audit-entry], calling @latest()@ will return it from your query without loading all the possible results.

If you wish to serve a large number of audit entries to the browser for tabular or graphical display, the @table()@ method efficiently returns a JSON-encoded generator object (see [node:dev/plugin/o/generate]).

If you use any of the @Array@ interface, such as @length@, all the matching @WorkUnit@ objects will be loaded. Calling @latest()@ after this will not make an additional load, but return the first object from the existing result set.


h2. Interface (build query)

Every query function returns the object itself, making the query functions suitable for chaining.

Once the results have been accessed (including reading the @length@ property), invoking any of the query functions will cause an exception.


h3(function). ref(ref)

Find audit entries relating to the object with [node:dev/plugin/interface/ref] of @ref@.


h3(function). auditEntryType(type, [type, ...])

Find audit entries that match any of the specified types.  All arguments must be @String@.

System generated audit entry types are listed under [node:dev/plugin/interface/audit-entry#Audit_Entry_Types].


h3(function). entityId(entityId)

Find audit entries relating to the entity @entityId@.  Currently this will only every be
a [node:dev/plugin/interface/security-principal] id.


h3(function). dateRange(from, to)

Find audit entries that were generated between the two dates: @from@ and @to@.


h3(function). displayable(bool)

Find audit entries that are marked either as @displayable@ (true) or @not displayable@ (false)

@displayable@ entries are visible in the Recent changes list, and typically relate to store objects.  @not displayable@ entries relate to other operations such as login and logout events.

*Note*: care must be taken when requesting @not displayable@ entries to ensure that only suitable information is displayed to the user, and that the user is authorised to view this information.


h3(function). userId(id)

Find audit entries generated by the [node:dev/plugin/interface/security-principal] with this @id@.

If an audit entry was generated while impersonation was active, this matches the impersonated user.


h3(function). authenticatedUserId

Find audit entries generated by the [node:dev/plugin/interface/security-principal] with this @id@.

If an audit entry was generated while impersonation was active, this matches the logged-in user (NOT the impersonated user).


h3(function). sortBy(fieldName)

Sort the results by @fieldName@.

@fieldName@ may be any property provided by the [node:dev/plugin/interface/audit-entry] interface.  The field name may optionally have have @_asc@ or @_desc@ appended to it.

@sortBy("userId")@ is equivalent to @sortBy("userId_desc")@, while @sortBy("creationDate_asc")@ will return the earliest audit entry first.

The default sort order is descending.  A fallback ordering by @creationDate@ descending is always applied.

Sorting by any field other than @creationDate@ is likely to only be useful for grouping purposes. For example, sorting by @userId@ will sort based on the internal user ID, not the @username@.


h3(function). limit(count)

At most @count@ results will every be returned by this query.  @count@ must be a positive integer.


h2. Interface (results)

h3(acts_as). Array

A @WorkUnitQuery@ object acts as a read-only JavaScript @Array@. Use the @[]@ operator to read rows.


h3(function). latest()

Returns the first audit entry that matches the query, in an efficient manner.


h3(function). first()

Alias of @latest()@


h3(function). table(fieldName, [fieldName, ...])

Perform the query, and return a generator object, suitable for direct output to a Response [node:dev/plugin/interface/response#body].

The results are a JSON encoded list of rows corresponding to the matching audit entries.

Each row is an @Array@ of values for that entry, corresponding to the requested fieldNames (in the requested order).

<pre>language=javascript
    O.audit.query().
        limit(2).
        table("auditEntryType", "ref", "creationDate");
</pre>

might produce:

<pre>language=javascript
    [
       ["CREATE", "88y19", "2013-06-27 09:54:57.691"], // First
       ["FILE-NEW", "89x10", "2013-06-26 10:43:46.580"]  // Second
    ]
</pre>