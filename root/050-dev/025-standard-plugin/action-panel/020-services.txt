title: Services
long_title: Action Panel Services
--

The Action Panel calls services with names based on the Element's @panel@ name and @category@. Your plugin implements them to add panel elements to the panels.


h2. Builder services

To build the action panel, the Action Panel plugin will call a service named after the panel's name, @std:action_panel:[panel]@, where @[panel]@ is the name from the Element definition.

It's called with @display@ and @builder@ arguments, for example:

<pre>language=javascript
P.implementService("std:action_panel:person",
    function(display, builder) {
        // implementation here
    }
);
</pre>

@builder@ is a [node:plugin/interface/panel-builder] object for building the user interface.

@display@ is an object with the following properties:


h3(key). object

If the Action Panel Element is being rendered on an object page, the [node:plugin/interface/store-object].


h3(key). path

The path of the page being requested.


h3(key). options

The options from the Element definition. While not entirely recommended, you can include additional options there which are relevant to your plugins, but do use your own namespace.


h3. Multiple panels

For clarity of user interface, remember to split the UI into logical groupings. Use the [node:plugin/interface/panel-builder#panel] function on the @PanelBuilder@.


h3. Category service

In addition, if the Element has a @category@ defined, a service named after the category, @std:action_panel:category:[category]@ will be called with the same arguments.



h2. Examples

With the definitions from the [node:dev/standard-plugin/action-panel/element:action panel elements] examples, to add a link to the home page for Administrator users:

<pre>language=javascript
P.implementService("std:action_panel:home_links",
    function(display, builder) {
        // Use normal API for checking current user permissions
        if(O.currentUser.isMemberOf(Group.Administrators)) {
            // Use PanelBuilder functions to add UI
            builder.link("default",
                "/do/example/admin", "Example Admin");
        }
    }
);
</pre>

To add a link to a per-person 'overview' page, shown to every user:

<pre>language=javascript
P.implementService("std:action_panel:person",
    function(display, builder) {
        builder.link("default",
            "/do/example/person-overview"+display.object.ref,
            "Overview")
        }
    }
);
</pre>


h2. Other services

The Action Panel plugin provides some utility services which may be needed occasionally.


h3. std:action_panel_priorities

The @PanelBuilder@ uses numeric and named priorities for ordering. You can use the @std:action_panel_priorities@ service to add additional named priorities.

<pre>language=javascript
P.implementService("std:action_panel_priorities",
    function(priorities) {
        priorities["example:special"] = 150;
        priorities["example:boring"]  = 5000;
    }
);
</pre>

Use this sparingly. It's often just as easy to use numbers.

Your names should be namespaced to your organisation or plugin, as they're shared between all plugins in the application.


h3. std_action_panel:build_panel

The @std_action_panel:build_panel@ service will create a @PanelBuilder@, call the various services to populate it, and return it.

It takes two arguments, the panel name and a @display@ object. The @display@ object will be filled out with @display.options.panel@ if you don't specify it.

For example, to build a @PanelBuilder@ for a person object:

<pre>language=javascript
var personRef = /* obtain ref to object somehow */
var person = personRef.load();
var builder = O.service("std_action_panel:build_panel", "person", {
    object: person
});
// builder is a populated PanelBuilder for that person
</pre>


