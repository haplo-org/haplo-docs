title: Workflow
long_title: Document store workflow integration
--

The Document store plugin also has integration with the workflow system, providing a @std:document_store@ [node:dev/standard-plugin/workflow/definition/features:workflow feature] that can be applied by a workflow with the @use()@ function. 

The second argument to the @use()@ function is a specification that defines and constructs the Document store.

h2. Specification

The specification is a [node:dev/standard-plugin/document-store/definition:Document store definition] with some additional properties.

h3(property). name

*Required*. The internal name of the Document store. This name will be used when querying the document for data or values and can not be shared with any other Document store being defined on your workflow.

h3(function). formsForKey(key)

*Required*. Needs to return an array of [node:dev/plugin/form:forms].

You can check/use the value of @key@ to return different forms depending on what is necessary.

h3(property). title

The human readable title of the Document store. This will be displayed when referencing the form in the UI unless alternate titles are specified using text system.

h3(property). panel

Specifies where in the sidebar to render a link for viewing the document, with lower numbers being shown closest to the top of the action panel/sidebar.

@panel@ can also be a named priority, if defined by the [node:dev/standard-plugin/action-panel/services#std_action:std:action_panel_priorities] service.

h3(property). path

The URL for the document. Must be a valid path (specified in @plugin.json@). The Document store plugin implements the handlers needed for viewing/editing the document at this path.

h3(property). priority

The priority within the @panel@. Defaults to "default".

h3(property). view

A list of objects specifying which roles are able to view the document and optionally limiting by [node:dev/standard-plugin/workflow/definition/selector:workflow selectors]. Omitting these objects or specifying an empty list @[]@ means that everyone can view the document.

The objects have two properties:

|*Property*|*Description*|
|roles|A list of [node:dev/standard-plugin/workflow/definition/std-features/entities#Entity_roles:roles] that should be allowed to view the document|
|selector|A [node:dev/standard-plugin/workflow/definition/selector:workflow selector] to select when in the Workflow the document should be viewable by the specified roles. An empty selector @{}@ will select on all states.| 

For example:

<pre>language=javascript
{
    // ... ,
    view: [
        {
            roles:["researcher", "supervisor"],
            selector:{state:"example_state"}
        }
    ]
}
</pre>

h3(property). edit

A list of objects specifying which roles are able to edit the document and optionally limiting by [node:dev/standard-plugin/workflow/definition/selector:workflow selectors]. Omitting these objects or specifying an empty list @[]@ means that everyone would be able to edit the document, and if it was not optional, would be forced to for every stage of the workflow.

The objects have three properties:

|*Property*|*Description*|
|roles|A list of [node:dev/standard-plugin/workflow/definition/std-features/entities#Entity_roles:roles] that should be allowed to view the document. An empty roles property will allow everyone to read the document|
|selector|A [node:dev/standard-plugin/workflow/definition/selector:workflow selector] to select when in the Workflow the document should be editable by the specified roles. An empty selector @{}@ will select on all states|
|transitionsFiltered|A list specifying which transitions should only be avaialble if the form has been edited and completed. Useful for situations where a document must be completed to progress, but should allow alternate/backwards traversing transitions when not completed|
|optional|Boolean. If present and true, allows the user to progress even if the document has not been edited or completed. This is the preferred way to specify optinality, and has the same effect as specifying transitionsFiltered as an empty list|

For example:

<pre>language=javascript
{
    // ... ,
    edit: [
        {
            roles: ["researcher"],
            selector: {state:"wait_researcher"},
            transitionsFiltered: ["progress"]
        }
    ]
}
</pre>

h3(property). actionableUserMustReview

A [node:dev/standard-plugin/workflow/definition/selector:selector] which if matched will show the actionable user the completed document with a prompt to confirm that they have (re)viewed the form before they are able to transition to the next state.

For example:

<pre>language=javascript
{
    // ... ,
    actionableUserMustReview: {
        state: "wait_approve",
        pendingTransitions: ["approve_application"]
    }
}
</pre>



h2. Accessing a document from the workflow

When using the @std:document_store@ workflow feature, a property named @documentStore@ is added to the Workflow object that gives access to the Document stores that have been defined.

To get an instance of a document store we call @instance(M)@ on our defined document store where @M@ is the workflow object.

For example:

<pre>language=javascript
var instance = EgWorkflow.documentStore.applicationForm.instance(M)
</pre>

From here we have access to the regular Document store interfaces. We could now get the most recently updated value for a path in the form for example with:

<pre>language=javascript
var instance = EgWorkflow.documentStore.applicationForm.instance(M)
var projectTitle = instance.currentDocument.projectTitle
</pre>

h2. Example definition

An example of a simple document store for a workflow:

<pre>language=javascript
var application = P.form({
    "specificationVersion": 0,
    "formId": "application",
    "formTitle": "Application",
    "elements": [
        {
            type: "text",
            label: "Name",
            path: "name"
        },
        {
            type: "paragraph",
            label: "Application"
            path: "applicationText"
        }
    ]
});

P.EgWorkflow.use("vre:document_store", {
    name: "applicationForm",
    title: "Application form",
    panel: 500,
    priority: 100,
    path: "/do/example-plugin/application-form"
    formsForKey: function(key) {
        return [application]
    },
    blankDocumentForKey: function(key) {
        var applicant = key.entities.applicant;
        return {
            name: applicant.title
        };
    },
    view: [{}],
    edit: [
        {
            roles: ["applicant"],
            selector: {state:"wait_application"}, 
            transitionsToBlock: ["submit_application"]}
        },
        {
            roles: ["supervisor"],
            selector: {flags:["supervisorEdit"]},
            optional: true
        }
    ],
    actionableUserMustReview: {
        pendingTransitions:["approve"]
    }
});
</pre>

