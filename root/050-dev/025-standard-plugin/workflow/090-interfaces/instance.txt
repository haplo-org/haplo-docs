title: WorkflowInstance
long_title: WorkflowInstance interface
link_as: keyword
--

You obtaining @WorkflowInstance@ objects using the [node:dev/standard-plugin/workflow/workflow-instances:Instance management functions] on the workflow Definition.

Always store @WorkflowInstance@ objects in variables and function arguments called @M@, for consistency.



h2. Interface

h3(property). title

The title (or name) of this workflow instance.



h3(property). url

The path to the page showing the user details of this workflow instance and the UI to interact with it.



h3(property). state

The current _state_ of the workflow instance.



h3(property). target

Reserved.



h3(property). transitions

The [node:dev/standard-plugin/workflow/interfaces/transitions] object representing the currently available transitions.



h3(property). flags

A JavaScript @Object@ containing all the currently set flags. Test a flag with @M.flags.nameOfFlag@.



h3(property). entities

Where you're using the [node:dev/standard-plugin/workflow/definition/std-features/entities] workflow feature, the @entities@ property is available as [node:dev/standard-plugin/workflow/definition/std-features/entities:documented].



h3(function). selected(selector)

Return @true@ if the instance is selected by the [node:dev/standard-plugin/workflow/definition/selector:Selector].



h3(function). transition(transition, data)

Perform the named @transition@, with optional additional @data@ to store in the Timeline.



h3(function). transitionUrl(transition, extraParameters)

Return the transition confirmation page URL for the given @transition@ as a string. Optionally specify an @extraParameters@ object to include any additional parameters required, eg: to specify the @target@.


h3(function). workflowService(name, arg1, arg2, ...)

Call the registered workflow service called @name@. Workflow services are implemented with [node:dev/standard-plugin/workflow/definition/function-lists#implementWorkflowService]. Further arguments are optional, and will be passed to the service function if specified.

This will return the first value returned by a registered service function.

An exception will be thrown if no service function is registered on this workflow for this @name@.

h3(function). workflowServiceMaybe(name, arg1, arg2, ...)

Like @workflowService()@, except @undefined@ is returned if no service function is registered on this workflow for this @name@.

h3(function). workflowServiceImplemented(name)

Returns @true@ if there is at least one function registered to implement the workflow service @name@ on this workflow.



h3(function). getTextMaybe(name, ...)

The arguments are one or more text string names, specified in the [node:dev/standard-plugin/workflow/definition/text:definition's text].

Return the first matching string, after interpolation, or @undefined@ if a string can't be found.



h3(function). hasRole(user, role)

Return @true@ if the given @user@, as a [node:dev/plugin/interface/security-principal], has the given @role@.



h3(function). hasAnyRole(user, roles)

@roles@ is an array of role names.

Returns @true@ if the given @user@, as a [node:dev/plugin/interface/security-principal], has at least one of the roles.



h3(function). getActionableBy(actionableBy, target)

Returns the [node:dev/plugin/interface/security-principal] representing the named @actionableBy@ role.

@target@ is reserved and should be omitted.



h3(function). addTimelineEntry(action, data)

Add a timeline entry with the given @action@ and optional @data@. Use [node:dev/standard-plugin/workflow/definition/function-lists#renderTimelineEntryDeferred] if they should be rendered in the timeline.



h3(function). timelineSelect()

Returns a [node:dev/plugin/interface/database-query] set to query the [node:dev/standard-plugin/workflow/interfaces/timeline-row] objects for this workflow.



h3(function). getStateDefinition(state)

Returns the state definition for the given state. Use only as a last resort.


h3(function). recalculateFlags()

Recalculate the @flags@ property. This is intended for use by plugins providing features which use [node:dev/standard-plugin/workflow/definition/function-lists#modifyFlags], and should be avoided in workflow implementations.
